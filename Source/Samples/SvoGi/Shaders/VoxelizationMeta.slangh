#pragma once
#include "Utils/HostDeviceShared.slangh"
#include "Utils/Math/MathConstants.slangh"


 struct VoxelizationMeta {
    uint3 CellDim = uint3(0);
    float CellSize = 1.0;

    float3 Min = float3(FLT_MAX);
    uint32_t CellNum = 0;

    float3 Max = float3(-FLT_MAX);
    uint32_t CurLevel = 0;

    uint3 SvoDim = uint3(0);
    uint32_t TotalLevel = 0;
 };


inline uint3 extract_index_form_linear(uint32_t linearIndex, uint3 dim) {
    uint32_t z = linearIndex / (dim.x * dim.y);
    linearIndex -= (z * dim.x * dim.y);
    uint32_t y = linearIndex / dim.x;
    uint32_t x = linearIndex % dim.x;

    return { x, y, z };
}

inline float4 uint32_to_RGBA8_255(uint32_t val) {
    return float4(float((val & 0x000000FF)), float((val & 0x0000FF00) >> 8U), float((val & 0x00FF0000) >> 16U),  float((val & 0xFF000000) >> 24U));
}

inline uint32_t RGBA8_255_to_uint32(float4 val) {
    return (uint32_t(val.w) & 0x000000FF)   << 24U
            |(uint32_t(val.z) & 0x000000FF) << 16U
            |(uint32_t(val.y) & 0x000000FF) << 8U 
            |(uint32_t(val.x) & 0x000000FF);
}

inline float3 pack_normal(float3 v) {
    return v * 0.5f + 0.5f;
}

inline float3 unpack_normal(float3 v) {
    return v * 2.0f - 1.0f;
}

#define COMMON_THREAD_SIZE      10
#define DIVIDE_THREAD_SIZE      64
#define MAX_AVG_ITERATIONS      100
#define PACKED_RGB_FACTOR       255.0f
#define INTERNAL_FLAG           0x80000000
#define SIGN_BIT_32             0x80000000
#define MAX_LEVEL               23
